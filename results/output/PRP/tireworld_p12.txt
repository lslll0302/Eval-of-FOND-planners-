1. Running translator
Second argument is a file name: use two translator arguments.
Parsing...
Parsing: [0.010s CPU, 0.009s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.003s wall-clock]
Generated 15 rules.
Computing model... [0.030s CPU, 0.035s wall-clock]
893 relevant atoms
581 auxiliary atoms
1474 final queue length
2148 total queue pushes
Completing instantiation... [0.020s CPU, 0.044s wall-clock]
Instantiating: [0.050s CPU, 0.086s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
20 uncovered facts
Choosing groups: [0.000s CPU, 0.004s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.020s CPU, 0.046s wall-clock]
20 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
Removed false proposition: 20 = <none of those>
0 operators removed
1 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.006s wall-clock]
Translator variables: 21
Translator derived variables: 0
Translator facts: 79
Translator goal facts: 1
Translator mutex groups: 1
Translator total mutex groups size: 39
Translator operators: 483
Translator axioms: 0
Translator task size: 2341
Translator peak memory: 31040 KB
Writing output... [0.000s CPU, 0.009s wall-clock]
Done! [0.090s CPU, 0.166s wall-clock]

2. Running preprocessor
Building causal graph...
The causal graph is not acyclic.
21 variables of 21 necessary
0 of 1 mutex groups necessary.
483 of 483 operators necessary.
0 of 0 axiom rules necessary.
Building domain transition graphs...
solveable in poly time 0
Building successor generator...
Preprocessor facts: 79
Preprocessor derived variables: 0
Preprocessor task size: 2302
Writing output...
done


3. Running search
./search/downward ipc policy-repair --dump-policy 2
This is a unit task.
./search/downward-release --heuristic "h=ff(cost_type=1)" --search "lazy_greedy([h],preferred=[h])" --random-seed 814102613 --dump-policy 2 < output
Simplifying transitions... done!
Variables: 21
Bytes per state: 4

Total allotted time (s): 1800
Max time for core JIC (remaining used in final-round repairs): 1800
Max time for each of the 1 epochs: 1800

 !! Warning: Disabling the simplification of unary operators !!
 !!           to keep the non-deterministic planning sound.  !!
Generated 9 state(s).
Dead ends: 0 state(s). (0 recorded)
move-car_DETDUP_0 n2 n35 (1)
Plan length: 1 step(s).
Plan cost: 1
Initial search time: 0s
Initial total time: 0s


Creating the simulator...


Regressing the plan...


Generating an initial policy...


Computing just-in-time repairs...

Could not close 0 of 0 open leaf states.
Investigated 1 states for the strong cyclic plan.
Marking policy strong cyclic.
Went through another policy of score 1


Running a final SCD check...


Running the simulation...
...achieved the goal!



                  -{ General Statistics }-

        FSAP Combination Count: 0
       Monotonicity violations: 0
             Successful states: 2 +/- 0
                       Replans: 0 +/- 0
                       Actions: 2 +/- 0
             Recorded Deadends: 0
            State-Action Pairs: 2
  Forbidden State-Action Pairs: 0
               Strongly Cyclic: True
                  Policy Score: 1
                     Succeeded: 1 / 1
 Depth limit (of 1000) reached: 0 / 1


                  -{ Timing Statistics }-

        Regression Computation: 0s
         Engine Initialization: 0s
                   Search Time: 0s
           Policy Construction: 0s
 Evaluating the policy quality: 0s
              Using the policy: 0s
          Just-in-case Repairs: 0s
                Simulator time: 0s
                    Total time: 0s



Dumping the policy and fsaps...
Strong cyclic plan found.
Peak memory: 5236 KB
